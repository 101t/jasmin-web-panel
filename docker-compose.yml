version: '3.8'

services:
  jasmin-web:
    image: tarekaec/jasmin_web_panel:latest
    ports:
      - "${JASMIN_WEB_PORT:-8000}:8000"
    deploy:
      replicas: 1
    env_file:
      - .env
    environment:
      DEBUG: 0
      DJANGO_SETTINGS_MODULE: config.settings.pro
      ALLOWED_HOSTS: '*'
      REDIS_URI: redis://redis:6379/1
      TELNET_HOST: jasmin
      SUBMIT_LOG: 1
    volumes:
      - web_public:/app/public
      - web_logs:/app/logs
    depends_on:
      - redis
      - db
  jasmin-celery:
    image: tarekaec/jasmin_web_panel:latest
    entrypoint: bash ./docker-entrypoint-celery.sh
    deploy:
      replicas: 1
    env_file:
      - .env
    environment:
      DEBUG: 0
      DJANGO_SETTINGS_MODULE: config.settings.pro
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      CELERY_LOG_LEVEL: info
    healthcheck:
      disable: true
    depends_on:
      - redis
      - db
  redis:
    image: redis:alpine
    tty: true
    volumes:
      - redis_data:/data
    command:
      - 'redis-server'
      - '--appendonly yes'
      - '--save 10 1'
      - '--auto-aof-rewrite-percentage 100'
      - '--auto-aof-rewrite-min-size 64mb'
    restart: unless-stopped
    environment:
      REDIS_REPLICATION_MODE: master
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping | grep PONG
    deploy:
      resources:
        limits:
          cpus: "${REDIS_CPU:-2}"
          memory: ${REDIS_MEM:-512M}
    security_opt:
      - no-new-privileges:true
  rabbit-mq:
    image: rabbitmq:3.10-management-alpine
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
    deploy:
      resources:
        limits:
          cpus: "${RABBITMQ_CPU:-2}"
          memory: ${RABBITMQ_MEM:-512M}
    security_opt:
      - no-new-privileges:true
  db:
    image: postgres:16.0-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-jasmin}"
      POSTGRES_USER: "${POSTGRES_USER:-jasmin}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-top_secret}"
  jasmin:
    image: jookies/jasmin:latest
    restart: unless-stopped
    ports:
      - "${JASMIN_SMS_PORT:-2775}:2775"
      - "${JASMIN_DASHBOARD_PORT:-8990}:8990"
      - "${JASMIN_HTTP_API_PORT:-1401}:1401"
    depends_on:
      redis:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    environment:
      REDIS_CLIENT_HOST: redis
      AMQP_BROKER_HOST: rabbit-mq
    deploy:
      resources:
        limits:
          cpus: "${JASMIN_CPU:-2}"
          memory: ${JASMIN_MEM:-512M}
    security_opt:
      - no-new-privileges:true
  sms_logger:
    image: jookies/jasmin:latest
    command: bash -c "pip install psycopg2-binary mysql-connector-python && exec python /build/misc/scripts/sms_logger.py"
    volumes:
      - /opt/jasmin-web-panel/config/docker/jasmin/jasmin/resource:/app/resource
    environment:
      DB_TYPE_MYSQL: ${DB_TYPE_MYSQL:-0}
      AMQP_BROKER_HOST: ${AMQP_BROKER_HOST:-rabbit-mq}
      AMQP_BROKER_PORT: ${AMQP_BROKER_PORT:-5672}
      AMQP_SPEC_FILE: '/app/resource/amqp0-9-1.xml'
      DB_HOST: ${DB_HOST:-db}
      DB_DATABASE: ${DB_DATABASE:-jasmin}
      DB_TABLE: ${DB_TABLE:-submit_log}
      DB_USER: ${DB_USER:-jasmin}
      DB_PASS: ${DB_PASS:-top_secret}
    depends_on:
      - rabbit-mq
      - db
    restart: unless-stopped
    healthcheck:
      disable: true
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - monitoring_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - jasmin
    deploy:
      resources:
        limits:
          cpus: "${PROMETHEUS_CPU:-2}"
          memory: ${PROMETHEUS_MEM:-512M}
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-2345}:3000"
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./dashboards:/opt/grafana-dashboards:ro
      - monitoring_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "${GRAFANA_CPU:-2}"
          memory: ${GRAFANA_MEM:-512M}
    security_opt:
      - no-new-privileges:true
volumes:
  web_public:
    driver: local
  web_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  monitoring_data:
    driver: local